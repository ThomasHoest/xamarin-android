steps:
- task: xamops.azdevex.lingering-process-task.lingering-process-task@1

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: specific
    project: 0bdbc590-a062-4c3f-b0f6-9383f67865ee
    pipeline: 'XQA.sln'
    buildVersionToDownload: latestFromBranch
    branchName: refs/heads/master
    downloadType: specific
    itemPattern: |
      XQA.Android/**
      provisionator/**
      NUnit.ConsoleRunner/**
    downloadPath: $(System.DefaultWorkingDirectory)

- checkout: self
  clean: true
  submodules: recursive

- checkout: monodroid
  clean: true
  submodules: recursive
  path: s/xamarin-android/external/monodroid
  persistCredentials: true

- checkout: qa
  clean: true
  fetchDepth: 10

- checkout: samples
  clean: true
  fetchDepth: 10

- checkout: xfsamples
  clean: true
  fetchDepth: 10

  # Clear out VS installer content before provisioning VS to avoid using unstable tools from pre-release installers.
- powershell: Remove-Item "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer" -Recurse -Force -ErrorAction Ignore
  displayName: Delete VS Installer
  condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: Provision Android Dependencies
  inputs:
    github_token: $(GitHub.Token)
    provisioning_script: $(System.DefaultWorkingDirectory)/provisionator/xamarin-android.csx
    provisioning_extra_args: -vv

- script: make prepare-update-mono V=1 PREPARE_CI=1 PREPARE_AUTOPROVISION=1
  workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
  displayName: install mono
  condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

- template: run-installer.yaml

- powershell: |   
    if ([Environment]::OSVersion.Platform -eq "Unix") {
       mono $(System.DefaultWorkingDirectory)/NUnit.ConsoleRunner/tools/nunit3-console.exe $(System.DefaultWorkingDirectory)/XQA.Android/XQA.Android.dll --where "cat == XAUnitTestSetup || cat == XATestPrep || cat == EnvironmentInfo"
    } else {
       $(System.DefaultWorkingDirectory)\NUnit.ConsoleRunner\tools\nunit3-console.exe $(System.DefaultWorkingDirectory)\XQA.Android\XQA.Android.dll --where "cat == XAUnitTestSetup || cat == XATestPrep || cat == EnvironmentInfo"
    }
  displayName: Test Environment Setup

- template: run-nunit-tests.yaml
  parameters:
    nunitConsole: $(System.DefaultWorkingDirectory)/NUnit.ConsoleRunner/tools/nunit3-console.exe
    testAssembly: $(System.DefaultWorkingDirectory)/XQA.Android/XQA.Android.dll
    testRunTitle: AOT Tests
    nunitConsoleExtraArgs: --where "cat == AotSupport"

- template: run-nunit-tests.yaml
  parameters:
    nunitConsole: $(System.DefaultWorkingDirectory)/NUnit.ConsoleRunner/tools/nunit3-console.exe
    testAssembly: $(System.DefaultWorkingDirectory)/XQA.Android/XQA.Android.dll
    testRunTitle: Test Environment Cleanup
    nunitConsoleExtraArgs: --where "cat == XATestCleanUp"

- template: fail-on-issue.yaml
